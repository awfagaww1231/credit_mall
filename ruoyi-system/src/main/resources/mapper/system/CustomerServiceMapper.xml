<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ruoyi.system.mapper.CustomerServiceMapper">
    
    <resultMap type="CustomerService" id="CustomerServiceResult">
        <result property="id"    column="id"    />
        <result property="customerServiceName"    column="customer_service_name"    />
        <result property="customerServiceLine"    column="customer_service_line"    />
        <result property="status"    column="status"    />
        <result property="langKey"    column="lang_key"    />
        <result property="inviteCode"    column="invite_code"    />
    </resultMap>

    <sql id="selectCustomerServiceVo">
        select id, customer_service_name, customer_service_line, status, lang_key,invite_code from customer_service
    </sql>

    <select id="selectCustomerServiceList" parameterType="CustomerService" resultMap="CustomerServiceResult">
        <include refid="selectCustomerServiceVo"/>
        <where>  
            <if test="customerServiceName != null  and customerServiceName != ''"> and customer_service_name like concat('%', #{customerServiceName}, '%')</if>
            <if test="customerServiceLine != null  and customerServiceLine != ''"> and customer_service_line like concat('%', #{customerServiceLine}, '%')</if>
            <if test="status != null "> and status = #{status}</if>
            <if test="inviteCode != null "> and invite_code = #{inviteCode}</if>
            <if test="langKey != null  and langKey != ''"> and lang_key like concat('%', #{langKey}, '%')</if>
        </where>
    </select>
    
    <select id="selectCustomerServiceById" parameterType="Long" resultMap="CustomerServiceResult">
        <include refid="selectCustomerServiceVo"/>
        where id = #{id}
    </select>
        
    <insert id="insertCustomerService" parameterType="CustomerService" useGeneratedKeys="true" keyProperty="id">
        insert into customer_service
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="customerServiceName != null">customer_service_name,</if>
            <if test="customerServiceLine != null">customer_service_line,</if>
            <if test="status != null">status,</if>
            <if test="langKey != null">lang_key,</if>
            <if test="inviteCode != null">invite_code,</if>
         </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="customerServiceName != null">#{customerServiceName},</if>
            <if test="customerServiceLine != null">#{customerServiceLine},</if>
            <if test="status != null">#{status},</if>
            <if test="langKey != null">#{langKey},</if>
            <if test="inviteCode != null">#{inviteCode},</if>
         </trim>
    </insert>

    <update id="updateCustomerService" parameterType="CustomerService">
        update customer_service
        <trim prefix="SET" suffixOverrides=",">
            <if test="customerServiceName != null">customer_service_name = #{customerServiceName},</if>
            <if test="customerServiceLine != null">customer_service_line = #{customerServiceLine},</if>
            <if test="status != null">status = #{status},</if>
            <if test="langKey != null">lang_key = #{langKey},</if>
            <if test="inviteCode != null">invite_code = #{inviteCode},</if>
        </trim>
        where id = #{id}
    </update>

    <delete id="deleteCustomerServiceById" parameterType="Long">
        delete from customer_service where id = #{id}
    </delete>

    <delete id="deleteCustomerServiceByIds" parameterType="String">
        delete from customer_service where id in 
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>
</mapper>